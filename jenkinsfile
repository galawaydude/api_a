pipeline {
    agent any

    environment {
        // Assumes SonarQube is running on localhost. Change if different.
        SONARQUBE_URL = "http://localhost:9000" 
        // Name of the SonarQube credential configured in Jenkins
        SONARQUBE_AUTH_TOKEN = "sonarqube-token" 
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from your repository
                git branch: 'main', url: 'https://github.com/galawaydude/api_a.git'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo "Building Docker image..."
                    def dockerImage = docker.build("blog-api:${env.BUILD_ID}", ".")
                    echo "Docker image built: ${dockerImage.id}"
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                script {
                    // Requires SonarQube Scanner for Jenkins plugin
                    // and a SonarQube server instance running.
                    def scannerHome = tool 'SonarQubeScanner'
                    withSonarQubeEnv('SonarQube') {
                        sh "${scannerHome}/bin/sonar-scanner"
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                // Waits for SonarQube to complete the analysis and checks the Quality Gate status.
                // Fails the pipeline if the Quality Gate is not 'OK'.
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
    }
}
