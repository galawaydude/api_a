pipeline {
    // 1. Define a Docker agent with the Sonar Scanner.
    // We run as 'root' to install Python.
    agent {
        docker {
            image 'sonarsource/sonar-scanner-cli:latest'
            args '-u root'
        }
    }

    environment {
        // Define an alias for python3 and add venv to the PATH
        PATH = "${env.WORKSPACE}/venv/bin:${env.PATH}"
    }

    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/galawaydude/api_a.git', branch: 'main'
            }
        }

        stage('Install Dependencies') {
            steps {
                // 2. Install Python and create the virtual environment.
                // The sonar-scanner image is Alpine-based, so we use 'apk'.
                sh 'apk add --no-cache python3 py3-pip'
                sh 'python3 -m venv venv'
                sh 'pip install --upgrade pip'
                sh 'pip install -r requirements.txt'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                // withSonarQubeEnv is not needed when using the scanner CLI directly
                // 3. Run the Sonar Scanner. It's already in the Docker image's PATH.
                // Note: Use your Jenkins secret credential ID for the token.
                sh """
                    sonar-scanner \
                      -Dsonar.projectKey=blog-api \
                      -Dsonar.sources=. \
                      -Dsonar.host.url=http://sonarqube:9000 \
                      -Dsonar.login=${credentials('sonar-token')}
                """
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    // Use the correct server name from your Jenkins configuration
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
    }
}