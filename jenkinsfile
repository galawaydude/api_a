// Jenkinsfile
pipeline {
    agent any

    stages {
        // ## Stage 1: Get the code
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/galawaydude/api_a.git'
            }
        }

        // ## Stage 2: Analyze code quality (Updated)
        stage('SonarQube Code Analysis') {
            steps {
                withSonarQubeEnv('MySonarQubeServer') {
                    // This line finds the path to the scanner tool you configured
                    def sqScanner = tool 'DefaultSonarScanner'
                    
                    // This line executes the scanner using its full path
                    sh "${sqScanner}/bin/sonar-scanner"
                }
            }
        }

        // ## Stage 3: Build the API into a Docker image
        stage('Build API Docker Image') {
            steps {
                script {
                    def dockerImage = docker.build("llm-api:${env.BUILD_NUMBER}")
                }
            }
        }

        // ## Stage 4: Run all tests
        stage('Run Automated Tests') {
            steps {
                script {
                    dockerImage.withRun { container ->
                        sh 'sleep 15'
                        sh 'npm install -g newman newman-reporter-htmlextra'
                        sh "newman run api_tests.postman_collection.json --reporters cli,htmlextra --reporter-htmlextra-export report.html"
                        // You can add your JMeter line back in once this is all working
                        // sh "jmeter -n -t APIPerformanceTest.jmx -l performance-results.jtl"
                    }
                }
            }
        }
    }

    // ## Post-Build Actions
    post {
        always {
            publishHTML(target: [
                reportDir: '.', reportFiles: 'report.html', reportName: 'Functional Test Report'
            ])
            // You can add the perfReport line back in later
            // perfReport glob: 'performance-results.jtl'
            sh "docker rmi llm-api:${env.BUILD_NUMBER}"
        }
    }
}